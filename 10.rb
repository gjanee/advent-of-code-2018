# --- Day 10: The Stars Align ---
#
# It's no use; your navigation system simply isn't capable of
# providing walking directions in the arctic circle, and certainly not
# in 1018.
#
# The Elves suggest an alternative.  In times like these, North Pole
# rescue operations will arrange points of light in the sky to guide
# missing Elves back to base.  Unfortunately, the message is easy to
# miss: the points move slowly enough that it takes hours to align
# them, but have so much momentum that they only stay aligned for a
# second.  If you blink at the wrong time, it might be hours before
# another message appears.
#
# You can see these points of light floating in the distance, and
# record their position in the sky and their velocity, the relative
# change in position per second (your puzzle input).  The coordinates
# are all given from your perspective; given enough time, those
# positions and velocities will move the points into a cohesive
# message!
#
# Rather than wait, you decide to fast-forward the process and
# calculate what the points will eventually spell.
#
# For example, suppose you note the following points:
#
# position=< 9,  1> velocity=< 0,  2>
# position=< 7,  0> velocity=<-1,  0>
# position=< 3, -2> velocity=<-1,  1>
# position=< 6, 10> velocity=<-2, -1>
# position=< 2, -4> velocity=< 2,  2>
# position=<-6, 10> velocity=< 2, -2>
# position=< 1,  8> velocity=< 1, -1>
# position=< 1,  7> velocity=< 1,  0>
# position=<-3, 11> velocity=< 1, -2>
# position=< 7,  6> velocity=<-1, -1>
# position=<-2,  3> velocity=< 1,  0>
# position=<-4,  3> velocity=< 2,  0>
# position=<10, -3> velocity=<-1,  1>
# position=< 5, 11> velocity=< 1, -2>
# position=< 4,  7> velocity=< 0, -1>
# position=< 8, -2> velocity=< 0,  1>
# position=<15,  0> velocity=<-2,  0>
# position=< 1,  6> velocity=< 1,  0>
# position=< 8,  9> velocity=< 0, -1>
# position=< 3,  3> velocity=<-1,  1>
# position=< 0,  5> velocity=< 0, -1>
# position=<-2,  2> velocity=< 2,  0>
# position=< 5, -2> velocity=< 1,  2>
# position=< 1,  4> velocity=< 2,  1>
# position=<-2,  7> velocity=< 2, -2>
# position=< 3,  6> velocity=<-1, -1>
# position=< 5,  0> velocity=< 1,  0>
# position=<-6,  0> velocity=< 2,  0>
# position=< 5,  9> velocity=< 1, -2>
# position=<14,  7> velocity=<-2,  0>
# position=<-3,  6> velocity=< 2, -1>
#
# Each line represents one point.  Positions are given as <X, Y>
# pairs: X represents how far left (negative) or right (positive) the
# point appears, while Y represents how far up (negative) or down
# (positive) the point appears.
#
# At 0 seconds, each point has the position given.  Each second, each
# point's velocity is added to its position.  So, a point with
# velocity <1, -2> is moving to the right, but is moving upward twice
# as quickly.  If this point's initial position were <3, 9>, after 3
# seconds, its position would become <6, 3>.
#
# Over time, the points listed above would move like this:
#
# Initially:
# ........#.............
# ................#.....
# .........#.#..#.......
# ......................
# #..........#.#.......#
# ...............#......
# ....#.................
# ..#.#....#............
# .......#..............
# ......#...............
# ...#...#.#...#........
# ....#..#..#.........#.
# .......#..............
# ...........#..#.......
# #...........#.........
# ...#.......#..........
#
# After 1 second:
# ......................
# ......................
# ..........#....#......
# ........#.....#.......
# ..#.........#......#..
# ......................
# ......#...............
# ....##.........#......
# ......#.#.............
# .....##.##..#.........
# ........#.#...........
# ........#...#.....#...
# ..#...........#.......
# ....#.....#.#.........
# ......................
# ......................
#
# After 2 seconds:
# ......................
# ......................
# ......................
# ..............#.......
# ....#..#...####..#....
# ......................
# ........#....#........
# ......#.#.............
# .......#...#..........
# .......#..#..#.#......
# ....#....#.#..........
# .....#...#...##.#.....
# ........#.............
# ......................
# ......................
# ......................
#
# After 3 seconds:
# ......................
# ......................
# ......................
# ......................
# ......#...#..###......
# ......#...#...#.......
# ......#...#...#.......
# ......#####...#.......
# ......#...#...#.......
# ......#...#...#.......
# ......#...#...#.......
# ......#...#..###......
# ......................
# ......................
# ......................
# ......................
#
# After 4 seconds:
# ......................
# ......................
# ......................
# ............#.........
# ........##...#.#......
# ......#.....#..#......
# .....#..##.##.#.......
# .......##.#....#......
# ...........#....#.....
# ..............#.......
# ....#......#...#......
# .....#.....##.........
# ...............#......
# ...............#......
# ......................
# ......................
#
# After 3 seconds, the message appeared briefly: HI.  Of course, your
# message will be much longer and will take many more seconds to
# appear.
#
# What message will eventually appear in the sky?
#
# --------------------
#
# How can we tell when the message has appeared without getting into
# optical character recognition?  Judging from the example given, we
# assume that the area of the points' minimum bounding rectangle
# decreases monotonically, reaches a minimum for a single second, and
# then begins increasing monotonically; and that the message appears
# at that minimum.  This turns out to be correct.

PX, PY, VX, VY = 0, 1, 2, 3

Points = open("10.in").map {|l|
  n = "( *-?\\d+)"
  m = /^position=<#{n},#{n}> velocity=<#{n},#{n}>$/.match(l)
  (1..4).map {|i| m[i].to_i }
}

def move_points(sign = 1)
  (0...Points.length).each do |i|
    Points[i][PX] += sign*Points[i][VX]
    Points[i][PY] += sign*Points[i][VY]
  end
end

def mbr_area
  Points.map {|p| p[PX] }.minmax.reduce(:-) *
  Points.map {|p| p[PY] }.minmax.reduce(:-)
end

last_a = mbr_area
t = 0
while true
  move_points
  t += 1
  a = mbr_area
  break if a > last_a
  last_a = a
end
move_points(-1)
t -= 1

xr = Points.map {|p| p[PX] }.minmax
yr = Points.map {|p| p[PY] }.minmax
a = Array.new(yr[1]-yr[0]+1) { "."*(xr[1]-xr[0]+1) }
Points.each {|p| a[p[PY]-yr[0]][p[PX]-xr[0]] = "#" }
puts a.join("\n")

# --- Part Two ---
#
# Good thing you didn't have to wait, because that would have taken a
# long time - much longer than the 3 seconds in the example above.
#
# Impressed by your sub-hour communication capabilities, the Elves are
# curious: exactly how many seconds would they have needed to wait for
# that message to appear?

puts t
